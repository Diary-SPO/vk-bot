import Hashes from 'jshashes'
import registration from '@src/dblogic/registration.ts'
import { StepScene } from '@vk-io/scenes'
import { Keyboard, type MessageContext } from 'vk-io'

export default new StepScene('registration', [
  async (context: MessageContext) => {
    const firstTime = context.scene.step.firstTime
    const text = context.text

    if (firstTime || !text) {
      await context.send('üò∫ –û–≥–æ, —Ç—ã –∑–¥–µ—Å—å –≤–ø–µ—Ä–≤—ã–µ ?')
      await context.send('üò® –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è.')
    }

    if (context.messagePayload) {
      switch (context.messagePayload.command) {
        case 'auth': { await context.scene.step.next(); return }
        case 'info_bot': await context.send('–¢—É—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏–Ω—Ñ–æ –æ –±–æ—Ç–µ...')
      }
    }

    await context.send({
      message: '–í–æ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–º–∞–Ω–¥—ã:',
      keyboard: Keyboard.builder().textButton({
        label: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
        payload: {
          command: 'auth'
        },
        color: Keyboard.PRIMARY_COLOR
      }).row()
        .textButton({
          label: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ',
          payload: {
            command: 'info_bot'
          },
          color: Keyboard.SECONDARY_COLOR
        }).oneTime()
    })
  },

  async (context: MessageContext) => {
    const firstTime = context.scene.step.firstTime
    const text = context.text ?? ''
    const keyboard = Keyboard.builder().textButton({
      label: '–ù–∞ –≥–ª–∞–≤–Ω—É—é...',
      payload: { command: 'goHome' },
      color: Keyboard.SECONDARY_COLOR
    }).oneTime()
    if (context?.messagePayload?.command == 'goHome') return await context.scene.step.previous()

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–Ω
    if (!context.scene.state.login && firstTime) {
      await context.send({ message: 'üë§ –í–≤–µ–¥–∏—Ç–µ –õ–æ–≥–∏–Ω:', keyboard })
    } else if (!context.scene.state.login) {
      const fio = text.split('-')
      if (fio.length === 2 && fio[1].length === 2) {
        await context.send('–õ–æ–≥–∏–Ω –ø—Ä–∏–Ω—è—Ç ‚úÖ')
        context.scene.state.login = text
        await context.scene.step.next()
      } else {
        await context.send('‚ùó –í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω')
        await context.send('‚õ± –ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞: familiya-io')
        await context.send({ message: 'üë§ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É:', keyboard })
      }
    }

    // return context.scene.step.next(); // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å—Ü–µ–Ω—ã
  },

  async (context: MessageContext) => {
    const firstTime = context.scene.step.firstTime
    const text = context.text ?? ''
    const keyboard = Keyboard.builder().textButton({
      label: '–ò–∑–º–µ–Ω–∏—Ç—å –õ–æ–≥–∏–Ω',
      payload: { command: 'editLogin' },
      color: Keyboard.SECONDARY_COLOR
    }).oneTime()
    if (context?.messagePayload?.command == 'editLogin') {
      context.scene.state.login = undefined
      context.scene.state.password = undefined
      return await context.scene.step.previous()
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    if (!context.scene.state.password && firstTime) {
      await context.send({ message: '‚úè –í–≤–µ–¥–∏—Ç–µ –ü–∞—Ä–æ–ª—å:', keyboard })
    } else if (!context.scene.state.password) {
      if (text.length >= 5) {
        await context.send('–ü–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—è—Ç ‚úÖ')
        context.scene.state.password = text
        await context.scene.step.next()
      } else {
        await context.send('‚ùó –í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å')
        await context.send('‚õ± –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 5 —Å–∏–º–≤–æ–ª–æ–≤')
        await context.send({ message: '‚úè –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É:', keyboard })
      }
    }

    // return context.scene.step.next(); // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å—Ü–µ–Ω—ã
  },
  async (context: MessageContext) => {
    // const firstTime = context.scene.step.firstTime
    // const text = context.text ?? ''
    const retryKeyboard = Keyboard.builder().textButton(
      {
        label: '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É',
        payload: {
          command: 'retry'
        }
      }).inline()

    if (context?.messagePayload?.command === 'rewriteAuthData') {

    } else {
      const message = await context.send('üòº –ê–≤—Ç–æ—Ä–∏–∑–∏—Ä—É—é...')
      const password = (new Hashes.SHA256()).b64(context.scene.state.password)
      const login = context.scene.state.login

      const res = await registration(login, password)

      switch (res) {
        case 1: {
          await message.editMessage({ message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞...', keyboard: retryKeyboard })
          return
        } break
        case 401: {
          await message.editMessage({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π –õ–æ–≥–∏–Ω –∏–ª–∏ –ü–∞—Ä–æ–ª—å!' })
          context.scene.state.login = undefined
          context.scene.state.password = undefined
          context.scene.step.go(1); return
        } break
        case 501: {
          await message.editMessage({ message: '–°–µ—Ä–≤–µ—Ä –¥–Ω–µ–≤–Ω–∏–∫–∞ —É–ø–∞–ª...', keyboard: retryKeyboard })
        } break
        default: {
          // –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
          await message.editMessage({ message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥, –Ω–æ –Ω–∞–¥–æ –ø–æ–¥—Ä—É–±–∏—Ç—å –±–∞–∑—É...' })
        } break
      }
    }
  }
])
