import { StepScene } from '@vk-io/scenes';
import { Context, Keyboard } from 'vk-io';

export default new StepScene('registration', [
    async (context) => {
        const firstTime = context.scene.step.firstTime
        const text      = context.text;
        if (firstTime|| !text) {
            await context.send('üò∫ –û–≥–æ, —Ç—ã –∑–¥–µ—Å—å –≤–ø–µ—Ä–≤—ã–µ ?');
            await context.send('üò® –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è.');
        }
        if (context.messagePayload) {
            switch (context.messagePayload.command) {
                case 'auth': return context.scene.step.next(); break;
                case 'info_bot': await context.send('–¢—É—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏–Ω—Ñ–æ –æ –±–æ—Ç–µ...')
            }
        }
        await context.send(
            {
                message: '–í–æ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–º–∞–Ω–¥—ã:',
                keyboard: Keyboard.builder().textButton({
                    label: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
                    payload: {
                        command: 'auth'
                    },
                    color: Keyboard.PRIMARY_COLOR
                }).row()
                .textButton({
                    label: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ',
                    payload: {
                        command: 'info_bot'
                    },
                    color: Keyboard.SECONDARY_COLOR
                }).oneTime()
            });
    },
    async (context) => {
        const firstTime = context.scene.step.firstTime
        const text      = context.text;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–Ω
        if (!context.scene.state.login && firstTime) {
            await context.send('üë§ –í–≤–µ–¥–∏—Ç–µ –õ–æ–≥–∏–Ω:'); return;
        } else if (!context.scene.state.login) {
            const fio = text.split('-');
            if (fio.length == 2 && fio[1].length == 2) {
                await context.send('–õ–æ–≥–∏–Ω –ø—Ä–∏–Ω—è—Ç ‚úÖ')
                context.scene.state.login = text;
                return context.scene.step.next();
            } else {
                await context.send('‚ùó –í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω')
                await context.send('‚õ± –ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞: familiya-io')
                await context.send('üë§ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É:'); return
            }
        }
        
        //return context.scene.step.next(); // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å—Ü–µ–Ω—ã
    }
])