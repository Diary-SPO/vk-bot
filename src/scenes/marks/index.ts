import { marks } from "@src/dblogic/marks";
import { StepScene } from "@vk-io/scenes";
import { Keyboard, MessageContext } from "vk-io";
import { Numbers } from "@src/types";

export default new StepScene('marks', [
    async (context: MessageContext) => {
        const {session} = context
        const user = session.diaryUser

        let message = '???'

        /* TODO: –ö—Ä–∞—Å–∏–≤–µ–Ω—å–∫–æ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å–∫–∏–¥–∞—Ç—å –∏ —Å–¥–µ–ª–∞—Ç—å —à–∞–±–ª–æ–Ω—ã
         * –¢–∞–∫–∂–µ —Å–¥–µ–ª–∞—Ç—å —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã—Ö–æ–≤–æ–º –¥—Ä—É–≥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ ./messageGenerator.ts
         */
        switch(context?.messagePayload?.command) {
            // –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
            case 'goHome': return await context.scene.enter('home')
            // –û—Ü–µ–Ω–∫–∏ –ø–æ –≤—Å–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞–º
            case 'allSubjects': {
                const subjectMarks = await marks(user.id, user.cookie, false)
                message = `${Object.values(subjectMarks ?? []).map(subject => {
                    if (subject.marks.length > 0) {
                        return `${subject.subjectName}\n`
                             + `${subject.marks.join(', ')}`
                    }
                    return ''
                }).join('\n\n')}`
            } break
            // –ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∫–∞ –ø–æ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏
            case 'statistics': {
                const subjectMarks = await marks(user.id, user.cookie, false)
                message =
                  `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏\n\n`
                + `üìç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫\n`
                + `${
                    typeof subjectMarks === 'number' || !subjectMarks ? '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∂–∫–∏ üòí' :
                    (
                        subjectMarks.length === 0 ? '–û—É, –ø—É—Å—Ç–æ. –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! ü§†' :
                        (
                            `${
                                (() => {
                                    const marks: {[key: string]: number} = {}
                                    let summ = 0
                                    let count = 0
                                    subjectMarks.forEach(subject => {
                                        subject.marks.forEach(mark => {
                                            summ += mark.length === 1 ? Number(mark) : 0
                                            count++
                                            if (marks?.[mark] != undefined) {
                                                marks[mark]++
                                                return
                                            }
                                            marks[mark] = 1
                                        })
                                    })
                                    return Object.keys(marks).sort().reverse().map(type => {
                                        return `${Numbers[Number(type)]} ‚Üí ${marks[type]}`
                                    }).join('\n')
                                    + `\n\nüé≥ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: ${(summ/count).toFixed(3)}`
                                })()
                            }`
                        )
                    )
                }`
            } break
            // –ü–æ –¥–µ—Ñ–æ–ª—Ç—É –æ—Ç–¥–∞—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏
            default: {
                message = '–û –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ü–µ–Ω–∫–∞—Ö –ø–æ–∫–∞ —á—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–≤–µ—Å—Ç–Ω–æ'
            }
        }
        return await context.send({
            message,
            keyboard: Keyboard.builder()
            .textButton({
                label: 'üíº –í—Å–µ –æ—Ü–µ–Ω–∫–∏',
                payload: {
                    command: 'allSubjects'
                }
            })
            .textButton({
                label: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä',
                payload: {
                    command: 'statistics'
                }
            })
            .row()
            .textButton({
                label: '–ù–∞–∑–∞–¥',
                payload: {
                    command: 'goHome'
                },
                color: Keyboard.NEGATIVE_COLOR
            })
          })
    }
])