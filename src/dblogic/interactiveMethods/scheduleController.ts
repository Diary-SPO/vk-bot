import { Keyboard, type MessageContext, type MessageEventContext } from 'vk-io'
import { schedule } from '..'
import vk from '@src/init/bot'
import { type Lesson, type Day, Grade } from 'diary-shared'

const numbers = ['0Ô∏è‚É£', '1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£', 'üîü']
const months = ['—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è', '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è']
const days = ['‚õ± –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', 'üöÄ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 'üëì –í—Ç–æ—Ä–Ω–∏–∫', 'üé≠ –°—Ä–µ–¥–∞', 'üéà –ß–µ—Ç–≤–µ—Ä–≥', '‚ú® –ü—è—Ç–Ω–∏—Ü–∞', 'üõµ –°—É–±–±–æ—Ç–∞']

export const scheduleController = async (command: string, messageId: number, eventContext: MessageEventContext | MessageContext): Promise<void> => {
  const { session } = eventContext
  const date = (eventContext?.eventPayload?.currDate !== undefined
    ? new Date(eventContext.eventPayload.currDate)
    : session.scheduleDate ?? new Date())

  date.setDate(date.getDate() + (command === 'prev' ? -1 : command === 'next' ? 1 : 0))
  session.scheduleDate = date

  const scheduleFirst = await constructResponse(command, messageId, session, eventContext?.eventPayload)

  // –û—Ç—Å—ã–ª–∞–µ–º –æ—Ç–≤–µ—Ç
  if (command === 'enter') {
    await eventContext.send(scheduleFirst)
  } else {
    await vk.api.messages.edit({
      peer_id: eventContext.peerId,
      message_id: messageId,
      ...scheduleFirst
    })
    if (eventContext?.eventId) {
      await eventContext.answer({
        text: '–ó–∞–≥—Ä—É–∂–µ–Ω–æ üòÉ',
        type: 'show_snackbar'
      })
    }
  }
}

async function constructResponse (command: string, messageId: number, session: any, payload: any): Promise<Response> {
  const commandBuilder = (command: string): string => command + (messageId > -1 ? `_${messageId}` : '')
  const keyboardConstruct = Keyboard.builder().callbackButton({
    label: '‚¨ÖÔ∏è –Ω–∞–∑–∞–¥',
    payload: {
      command: commandBuilder('schedule_prev'),
      currDate: session.scheduleDate
    }
  }).callbackButton({
    label: '–≤–ø–µ—Ä—ë–¥ ‚û°Ô∏è',
    payload: {
      command: commandBuilder('schedule_next'),
      currDate: session.scheduleDate
    }
  }).inline()

  const commands = command.split('-')

  switch (commands[0]) {
    case 'select': {
      const keyboardConstructInfo = Keyboard.builder()
        .callbackButton({
          label: '–Ω–∞–∑–∞–¥',
          payload: {
            command: commandBuilder('schedule_refresh'),
            currDate: session.scheduleDate
          }
        }).inline()
      const info = session.day.lessons[payload.indexLesson] as Lesson
      const themes = info.gradebook?.themes
      const teacher = info.timetable.teacher
      return {
        message: `ü§ì –ü—Ä–µ–¥–º–µ—Ç: ${info.name}
üë®‚Äçüíª –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: ${[teacher?.lastName, teacher?.firstName, teacher?.middleName].join(' ')}\n
‚è∞ ${info.startTime} - ${info.endTime}
üè´ –ê—É–¥–∏—Ç–æ—Ä–∏—è: ${info.timetable.classroom.name}, —Å—Ç. ${info.timetable.classroom.building}\n
üõ° –¢–µ–º–∞: ${themes === undefined ? '–ù–µ—Ç—É' : themes[0]}\n
${(info?.gradebook?.tasks?.length ?? 0) > 0
? `üîî –ó–∞–¥–∞–Ω–∏—è: ${
  Object.values(info?.gradebook?.tasks ?? []).map((task, index) => {
    return `\n${numbers[index]} –¢–µ–º–∞: ${task.topic}
üìà –û—Ü–µ–Ω–∫–∞: ${task?.mark ? Grade[task.mark] ?? task.mark : (task?.isRequired ? '–î–û–õ–ì üòêüî´' : '–Ω–µ—Ç—É')}
    `
  })
}`
: ''}
        `,
        keyboard: keyboardConstructInfo
      }
    }
    default: {
      let day: Day | number | null = await schedule(session.diaryUser, session.scheduleDate, false, session.diaryUser.cookie)
      let isDatabase = false
      if (typeof day === 'number' || day === null) {
        day = await schedule(session.diaryUser, session.scheduleDate, true, session.diaryUser.cookie)
        isDatabase = true
        if (!day || typeof day === 'number') {
          return {
            message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...',
            keyboard: Keyboard.builder().callbackButton({
              label: '–û–±–Ω–æ–≤–∏—Ç—å',
              payload: {
                command: commandBuilder('schedule_refresh')
              }
            }).inline()
          }
        }
      }
      session.day = day

      day.lessons?.forEach((lesson, index) => {
        if (!lesson.timetable) return
        keyboardConstruct.row().callbackButton({
          label: `${numbers[index]} ${lesson.name?.substring(0, lesson.name.length > 20 ? 20 : lesson.name.length) + '...'}`,
          payload: {
            command: commandBuilder('schedule_select-' + index),
            indexLesson: index,
            currDate: session.scheduleDate
          }
        })
      })

      const date = new Date(session.scheduleDate)
      const dateString = `${date.getDate().toString().padStart(2, '0')} ${months[Number(date.getMonth().toString().padStart(2, '0'))]} ${date.getFullYear()}`

      return {
        // peerId: MessageContext.peerId,
        message: 'üìÖ –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: ' + dateString + `\n${days[date.getDay()]}` + buildLessons(day, isDatabase),
        keyboard: keyboardConstruct
      }
    }
  }
}

function buildLessons (day: Day, isDatabase: boolean): string {
  const lessons = day.lessons
  console.log(day)

  if (lessons?.length === 0 || !lessons) {
    if (isDatabase) {
      return `\n\n–í –±–∞–∑–µ –ø—É—Å—Ç–æ, –∞ –¥–Ω–µ–≤–Ω–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω :)`
    }
    return '\n\nüéâ –ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç üéâ'
  }
  return Object.values(lessons).map((lesson, index) => {
    if (!lesson.name) return '\n'
    return `
${numbers[index]} ${lesson.name}
‚è∞ ${lesson.startTime} - ${lesson.endTime}
üè§ –ê—É–¥–∏—Ç–æ—Ä–∏—è: ${lesson.timetable.classroom.name === '0' ? '–î–û ü§†' : lesson.timetable.classroom.name}
`
// TODO: –ï—Å–ª–∏ –¥–∏—Å—Ç–∞–Ω—Ç, –Ω—É–∂–Ω–æ –ø—Ä–≤–æ–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –î–ó, –∏ –µ—Å–ª–∏ –µ—Å—Ç—å, —Ç–æ —É–≤–µ–¥–æ–º–∏—Ç—å –æ–± —ç—Ç–æ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ–ª–µ
  }).join('') + (isDatabase ? '\n\nüìå –ü–û–õ–£–ß–ï–ù–û –ò–ó –ë–ê–ó–´ üìå' : '') // –£–±–∏—Ä–∞–µ—Ç –∑–∞–ø—è—Ç—ã–µ –Ω–∞ –≤—ã—Ö–æ–¥–µ
}

interface Response {
  message: string
  keyboard: Keyboard
}
